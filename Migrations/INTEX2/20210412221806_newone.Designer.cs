// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MummyMadness.Models;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MummyMadness.Migrations.INTEX2
{
    [DbContext(typeof(INTEX2Context))]
    [Migration("20210412221806_newone")]
    partial class newone
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "en_US.UTF-8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("MummyMadness.Models.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique();

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("MummyMadness.Models.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("MummyMadness.Models.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique();

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("MummyMadness.Models.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("MummyMadness.Models.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("MummyMadness.Models.AspNetUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("MummyMadness.Models.AspNetUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MummyMadness.Models.Biosample", b =>
                {
                    b.Property<int>("Burialid")
                        .HasColumnType("integer")
                        .HasColumnName("burialid");

                    b.Property<string>("Area")
                        .HasColumnType("character varying")
                        .HasColumnName("area");

                    b.Property<string>("Bag")
                        .HasColumnType("character varying")
                        .HasColumnName("bag");

                    b.Property<string>("Burial")
                        .HasColumnType("character varying")
                        .HasColumnName("burial");

                    b.Property<string>("Cluster")
                        .HasColumnType("character varying")
                        .HasColumnName("cluster_");

                    b.Property<string>("Date")
                        .HasColumnType("character varying")
                        .HasColumnName("date_");

                    b.Property<string>("EW")
                        .HasColumnType("character varying")
                        .HasColumnName("e_w");

                    b.Property<int?>("High1")
                        .HasColumnType("integer")
                        .HasColumnName("high1");

                    b.Property<int?>("High2")
                        .HasColumnType("integer")
                        .HasColumnName("high2");

                    b.Property<string>("Initials")
                        .HasColumnType("character varying")
                        .HasColumnName("initials");

                    b.Property<int?>("Low1")
                        .HasColumnType("integer")
                        .HasColumnName("low1");

                    b.Property<int?>("Low2")
                        .HasColumnType("integer")
                        .HasColumnName("low2");

                    b.Property<string>("NS")
                        .HasColumnType("character varying")
                        .HasColumnName("n_s");

                    b.Property<string>("Notes")
                        .HasColumnType("character varying")
                        .HasColumnName("notes");

                    b.Property<string>("PreviouslySampled")
                        .HasColumnType("character varying")
                        .HasColumnName("previously_sampled");

                    b.Property<int?>("Rack")
                        .HasColumnType("integer")
                        .HasColumnName("rack");

                    b.HasKey("Burialid")
                        .HasName("biosamples_pkey");

                    b.ToTable("biosamples");
                });

            modelBuilder.Entity("MummyMadness.Models.C14datum", b =>
                {
                    b.Property<int>("Burialid")
                        .HasColumnType("integer")
                        .HasColumnName("burialid");

                    b.Property<int?>("Area")
                        .HasColumnType("integer")
                        .HasColumnName("area");

                    b.Property<int?>("Burial")
                        .HasColumnType("integer")
                        .HasColumnName("burial");

                    b.Property<string>("BurialId1")
                        .HasColumnType("character varying")
                        .HasColumnName("burial_id");

                    b.Property<int?>("C14Sample2017")
                        .HasColumnType("integer")
                        .HasColumnName("c14_sample_2017");

                    b.Property<string>("Calibrated95CalendarDateAvg")
                        .HasColumnType("character varying")
                        .HasColumnName("calibrated_95_calendar_date_avg");

                    b.Property<int?>("Calibrated95CalendarDateMax")
                        .HasColumnType("integer")
                        .HasColumnName("calibrated_95_calendar_date_max");

                    b.Property<int?>("Calibrated95CalendarDateMin")
                        .HasColumnType("integer")
                        .HasColumnName("calibrated_95_calendar_date_min");

                    b.Property<int?>("Calibrated95CalendarDateSpan")
                        .HasColumnType("integer")
                        .HasColumnName("calibrated_95_calendar_date_span");

                    b.Property<string>("Category")
                        .HasColumnType("character varying")
                        .HasColumnName("category");

                    b.Property<string>("Conventional14cAgeBp")
                        .HasColumnType("character varying")
                        .HasColumnName("conventional_14c_age_bp");

                    b.Property<string>("Description")
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<string>("E")
                        .HasColumnType("character varying")
                        .HasColumnName("e");

                    b.Property<string>("EW")
                        .HasColumnType("character varying")
                        .HasColumnName("e_w");

                    b.Property<int?>("Foci")
                        .HasColumnType("integer")
                        .HasColumnName("foci");

                    b.Property<string>("FourteencCalendarDate")
                        .HasColumnType("character varying")
                        .HasColumnName("fourteenc_calendar_date");

                    b.Property<string>("Location")
                        .HasColumnType("character varying")
                        .HasColumnName("location");

                    b.Property<string>("N")
                        .HasColumnType("character varying")
                        .HasColumnName("n");

                    b.Property<int?>("NS")
                        .HasColumnType("integer")
                        .HasColumnName("n_s");

                    b.Property<string>("Notes")
                        .HasColumnType("character varying")
                        .HasColumnName("notes");

                    b.Property<string>("Question")
                        .HasColumnType("character varying")
                        .HasColumnName("question");

                    b.Property<int?>("Rack")
                        .HasColumnType("integer")
                        .HasColumnName("rack");

                    b.Property<int?>("SizeMl")
                        .HasColumnType("integer")
                        .HasColumnName("size_ml");

                    b.Property<string>("Square")
                        .HasColumnType("character varying")
                        .HasColumnName("square");

                    b.Property<int?>("Tube")
                        .HasColumnType("integer")
                        .HasColumnName("tube");

                    b.HasKey("Burialid")
                        .HasName("c14data_pkey");

                    b.ToTable("c14data");
                });

            modelBuilder.Entity("MummyMadness.Models.Cranial", b =>
                {
                    b.Property<int>("Burialid")
                        .HasColumnType("integer")
                        .HasColumnName("burialid");

                    b.Property<string>("BasionBregmaHeight")
                        .HasColumnType("character varying")
                        .HasColumnName("basion_bregma_height");

                    b.Property<string>("BasionNasion")
                        .HasColumnType("character varying")
                        .HasColumnName("basion_nasion");

                    b.Property<string>("BasionProsthionLength")
                        .HasColumnType("character varying")
                        .HasColumnName("basion_prosthion_length");

                    b.Property<string>("BizygomaticDiameter")
                        .HasColumnType("character varying")
                        .HasColumnName("bizygomatic_diameter");

                    b.Property<string>("Bodygender")
                        .HasColumnType("character varying")
                        .HasColumnName("bodygender");

                    b.Property<string>("BurialArtifactDescription")
                        .HasColumnType("character varying")
                        .HasColumnName("burial_artifact_description");

                    b.Property<string>("BurialDepth")
                        .HasColumnType("character varying")
                        .HasColumnName("burial_depth");

                    b.Property<int?>("BurialNumber")
                        .HasColumnType("integer")
                        .HasColumnName("burial_number");

                    b.Property<int?>("BurialPositioningEastNumber")
                        .HasColumnType("integer")
                        .HasColumnName("burial_positioning_east_number");

                    b.Property<string>("BurialPositioningEastwestDirection")
                        .HasColumnType("character varying")
                        .HasColumnName("burial_positioning_eastwest_direction");

                    b.Property<int?>("BurialPositioningNorthNumber")
                        .HasColumnType("integer")
                        .HasColumnName("burial_positioning_north_number");

                    b.Property<string>("BurialPositioningNorthsouthDirection")
                        .HasColumnType("character varying")
                        .HasColumnName("burial_positioning_northsouth_direction");

                    b.Property<int?>("BurialPositioningSouthNumber")
                        .HasColumnType("integer")
                        .HasColumnName("burial_positioning_south_number");

                    b.Property<int?>("BurialPositioningWestNumber")
                        .HasColumnType("integer")
                        .HasColumnName("burial_positioning_west_number");

                    b.Property<string>("BurialSubplotDirection")
                        .HasColumnType("character varying")
                        .HasColumnName("burial_subplot_direction");

                    b.Property<string>("Buriedwithartifacts")
                        .HasColumnType("character varying")
                        .HasColumnName("buriedwithartifacts");

                    b.Property<string>("Gilesgender")
                        .HasColumnType("character varying")
                        .HasColumnName("gilesgender");

                    b.Property<string>("InterorbitalBreadth")
                        .HasColumnType("character varying")
                        .HasColumnName("interorbital_breadth");

                    b.Property<string>("MaximumCranialBreadth")
                        .HasColumnType("character varying")
                        .HasColumnName("maximum_cranial_breadth");

                    b.Property<string>("MaximumCranialLength")
                        .HasColumnType("character varying")
                        .HasColumnName("maximum_cranial_length");

                    b.Property<string>("MaximumNasalBreadth")
                        .HasColumnType("character varying")
                        .HasColumnName("maximum_nasal_breadth");

                    b.Property<string>("NasionProsthion")
                        .HasColumnType("character varying")
                        .HasColumnName("nasion_prosthion");

                    b.Property<int?>("SampleNumber")
                        .HasColumnType("integer")
                        .HasColumnName("sample_number");

                    b.HasKey("Burialid")
                        .HasName("cranial_pkey");

                    b.ToTable("cranial");
                });

            modelBuilder.Entity("MummyMadness.Models.Official", b =>
                {
                    b.Property<int>("Burialid")
                        .HasColumnType("integer")
                        .HasColumnName("burialid");

                    b.Property<string>("AgeCodeSingle")
                        .HasColumnType("character varying")
                        .HasColumnName("age_code_single");

                    b.Property<string>("Area")
                        .HasColumnType("character varying")
                        .HasColumnName("area");

                    b.Property<string>("ArtifemaleactFemaleound")
                        .HasColumnType("character varying")
                        .HasColumnName("artifemaleact_femaleound");

                    b.Property<string>("ArtifemaleactsDescription")
                        .HasColumnType("character varying")
                        .HasColumnName("artifemaleacts_description");

                    b.Property<string>("Bag")
                        .HasColumnType("character varying")
                        .HasColumnName("bag");

                    b.Property<string>("BasilarSuture")
                        .HasColumnType("character varying")
                        .HasColumnName("basilar_suture");

                    b.Property<string>("BasionBregmaleaHeight")
                        .HasColumnType("character varying")
                        .HasColumnName("basion_bregmalea_height");

                    b.Property<string>("BasionNasion")
                        .HasColumnType("character varying")
                        .HasColumnName("basion_nasion");

                    b.Property<string>("BasionProsthionLength")
                        .HasColumnType("character varying")
                        .HasColumnName("basion_prosthion_length");

                    b.Property<string>("BiologicalCluster")
                        .HasColumnType("character varying")
                        .HasColumnName("biological_cluster");

                    b.Property<string>("BizygomaleaticDiamaleeter")
                        .HasColumnType("character varying")
                        .HasColumnName("bizygomaleatic_diamaleeter");

                    b.Property<string>("BodyAnalysis")
                        .HasColumnType("character varying")
                        .HasColumnName("body_analysis");

                    b.Property<string>("BoneTaken")
                        .HasColumnType("character varying")
                        .HasColumnName("bone_taken");

                    b.Property<string>("Burial")
                        .HasColumnType("character varying")
                        .HasColumnName("burial");

                    b.Property<string>("BurialAdultChild")
                        .HasColumnType("character varying")
                        .HasColumnName("burial_adult_child");

                    b.Property<string>("BurialAreaEastorwest")
                        .HasColumnType("character varying")
                        .HasColumnName("burial_area_eastorwest");

                    b.Property<string>("BurialAreaNorthorsouth")
                        .HasColumnType("character varying")
                        .HasColumnName("burial_area_northorsouth");

                    b.Property<string>("BurialDepth")
                        .HasColumnType("character varying")
                        .HasColumnName("burial_depth");

                    b.Property<string>("BurialDirection")
                        .HasColumnType("character varying")
                        .HasColumnName("burial_direction");

                    b.Property<string>("BurialId1")
                        .HasColumnType("character varying")
                        .HasColumnName("burial_id");

                    b.Property<string>("BurialLocationEw")
                        .HasColumnType("character varying")
                        .HasColumnName("burial_location_ew");

                    b.Property<string>("BurialLocationNs")
                        .HasColumnType("character varying")
                        .HasColumnName("burial_location_ns");

                    b.Property<string>("BurialNumaleber")
                        .HasColumnType("character varying")
                        .HasColumnName("burial_numaleber");

                    b.Property<string>("BurialPreservation")
                        .HasColumnType("character varying")
                        .HasColumnName("burial_preservation");

                    b.Property<string>("BurialSituationNotes")
                        .HasColumnType("character varying")
                        .HasColumnName("burial_situation_notes");

                    b.Property<string>("BurialSouthtofemaleeet")
                        .HasColumnType("character varying")
                        .HasColumnName("burial_southtofemaleeet");

                    b.Property<string>("BurialSouthtohead")
                        .HasColumnType("character varying")
                        .HasColumnName("burial_southtohead");

                    b.Property<string>("BurialSubplot")
                        .HasColumnType("character varying")
                        .HasColumnName("burial_subplot");

                    b.Property<string>("BurialWesttofemaleeet")
                        .HasColumnType("character varying")
                        .HasColumnName("burial_westtofemaleeet");

                    b.Property<string>("BurialWesttohead")
                        .HasColumnType("character varying")
                        .HasColumnName("burial_westtohead");

                    b.Property<string>("BurialWrapping")
                        .HasColumnType("character varying")
                        .HasColumnName("burial_wrapping");

                    b.Property<string>("Burialageatdeath")
                        .HasColumnType("character varying")
                        .HasColumnName("burialageatdeath");

                    b.Property<string>("Burialagemaleethod")
                        .HasColumnType("character varying")
                        .HasColumnName("burialagemaleethod");

                    b.Property<string>("Burialgendermaleethod")
                        .HasColumnType("character varying")
                        .HasColumnName("burialgendermaleethod");

                    b.Property<string>("Burialhaircolor")
                        .HasColumnType("character varying")
                        .HasColumnName("burialhaircolor");

                    b.Property<string>("Burialnors")
                        .HasColumnType("character varying")
                        .HasColumnName("burialnors");

                    b.Property<string>("Burialsamalepletaken")
                        .HasColumnType("character varying")
                        .HasColumnName("burialsamalepletaken");

                    b.Property<string>("Burialxeorw")
                        .HasColumnType("character varying")
                        .HasColumnName("burialxeorw");

                    b.Property<string>("ButtonOsteomalea")
                        .HasColumnType("character varying")
                        .HasColumnName("button_osteomalea");

                    b.Property<string>("ByuSamaleple")
                        .HasColumnType("character varying")
                        .HasColumnName("byu_samaleple");

                    b.Property<string>("Cluster")
                        .HasColumnType("character varying")
                        .HasColumnName("cluster");

                    b.Property<string>("CranialSuture")
                        .HasColumnType("character varying")
                        .HasColumnName("cranial_suture");

                    b.Property<string>("CribraOrbitala")
                        .HasColumnType("character varying")
                        .HasColumnName("cribra_orbitala");

                    b.Property<string>("DateExcavated")
                        .HasColumnType("character varying")
                        .HasColumnName("date_excavated");

                    b.Property<string>("DayOnSkull")
                        .HasColumnType("character varying")
                        .HasColumnName("day_on_skull");

                    b.Property<string>("Description")
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<string>("DescriptionOfemaleTaken")
                        .HasColumnType("character varying")
                        .HasColumnName("description_ofemale_taken");

                    b.Property<string>("DorsalPitting")
                        .HasColumnType("character varying")
                        .HasColumnName("dorsal_pitting");

                    b.Property<string>("EastToFemaleeet")
                        .HasColumnType("character varying")
                        .HasColumnName("east_to_femaleeet");

                    b.Property<string>("EastToHead")
                        .HasColumnType("character varying")
                        .HasColumnName("east_to_head");

                    b.Property<string>("EstimaleateLivingStature")
                        .HasColumnType("character varying")
                        .HasColumnName("estimaleate_living_stature");

                    b.Property<string>("FemaleaceBundle")
                        .HasColumnType("character varying")
                        .HasColumnName("femaleace_bundle");

                    b.Property<string>("FemaleemaleurHead")
                        .HasColumnType("character varying")
                        .HasColumnName("femaleemaleur_head");

                    b.Property<string>("FemaleemaleurLength")
                        .HasColumnType("character varying")
                        .HasColumnName("femaleemaleur_length");

                    b.Property<string>("FemaleieldBook")
                        .HasColumnType("character varying")
                        .HasColumnName("femaleield_book");

                    b.Property<string>("FemaleieldBookPageNumaleber")
                        .HasColumnType("character varying")
                        .HasColumnName("femaleield_book_page_numaleber");

                    b.Property<string>("FemaleoremaleanMaleagnumale")
                        .HasColumnType("character varying")
                        .HasColumnName("femaleoremalean_maleagnumale");

                    b.Property<string>("GeFemaleunctionTotal")
                        .HasColumnType("character varying")
                        .HasColumnName("ge_femaleunction_total");

                    b.Property<string>("GenderCode")
                        .HasColumnType("character varying")
                        .HasColumnName("gender_code");

                    b.Property<string>("GenderGe")
                        .HasColumnType("character varying")
                        .HasColumnName("gender_ge");

                    b.Property<string>("Gonian")
                        .HasColumnType("character varying")
                        .HasColumnName("gonian");

                    b.Property<string>("Goods")
                        .HasColumnType("character varying")
                        .HasColumnName("goods");

                    b.Property<string>("HairColor")
                        .HasColumnType("character varying")
                        .HasColumnName("hair_color");

                    b.Property<string>("HairColorCode")
                        .HasColumnType("character varying")
                        .HasColumnName("hair_color_code");

                    b.Property<string>("HairTaken")
                        .HasColumnType("character varying")
                        .HasColumnName("hair_taken");

                    b.Property<string>("HighPairEw")
                        .HasColumnType("character varying")
                        .HasColumnName("high_pair_ew");

                    b.Property<string>("HighPairNs")
                        .HasColumnType("character varying")
                        .HasColumnName("high_pair_ns");

                    b.Property<string>("HumaleerusHead")
                        .HasColumnType("character varying")
                        .HasColumnName("humaleerus_head");

                    b.Property<string>("HumaleerusLength")
                        .HasColumnType("character varying")
                        .HasColumnName("humaleerus_length");

                    b.Property<string>("InitialsOfemaleDataEntryChecker")
                        .HasColumnType("character varying")
                        .HasColumnName("initials_ofemale_data_entry_checker");

                    b.Property<string>("InitialsOfemaleDataEntryExpert")
                        .HasColumnType("character varying")
                        .HasColumnName("initials_ofemale_data_entry_expert");

                    b.Property<string>("InterorbitalBreadth")
                        .HasColumnType("character varying")
                        .HasColumnName("interorbital_breadth");

                    b.Property<string>("Length")
                        .HasColumnType("character varying")
                        .HasColumnName("length");

                    b.Property<string>("LengthMale")
                        .HasColumnType("character varying")
                        .HasColumnName("length_male");

                    b.Property<string>("LinearHypoplasiaEnamaleel")
                        .HasColumnType("character varying")
                        .HasColumnName("linear_hypoplasia_enamaleel");

                    b.Property<string>("LowPairEw")
                        .HasColumnType("character varying")
                        .HasColumnName("low_pair_ew");

                    b.Property<string>("LowPairNs")
                        .HasColumnType("character varying")
                        .HasColumnName("low_pair_ns");

                    b.Property<string>("MaleaximaleumaleCranialBreadth")
                        .HasColumnType("character varying")
                        .HasColumnName("maleaximaleumale_cranial_breadth");

                    b.Property<string>("MaleaximaleumaleCranialLength")
                        .HasColumnType("character varying")
                        .HasColumnName("maleaximaleumale_cranial_length");

                    b.Property<string>("MaleaximaleumaleNasalBreadth")
                        .HasColumnType("character varying")
                        .HasColumnName("maleaximaleumale_nasal_breadth");

                    b.Property<string>("MaleedialIpRamaleus")
                        .HasColumnType("character varying")
                        .HasColumnName("maleedial_ip_ramaleus");

                    b.Property<string>("MaleetopicSuture")
                        .HasColumnType("character varying")
                        .HasColumnName("maleetopic_suture");

                    b.Property<string>("MaleonthExcavated")
                        .HasColumnType("character varying")
                        .HasColumnName("maleonth_excavated");

                    b.Property<string>("MaleonthOnSkull")
                        .HasColumnType("character varying")
                        .HasColumnName("maleonth_on_skull");

                    b.Property<string>("NasionProsthion")
                        .HasColumnType("character varying")
                        .HasColumnName("nasion_prosthion");

                    b.Property<string>("NuchalCrest")
                        .HasColumnType("character varying")
                        .HasColumnName("nuchal_crest");

                    b.Property<string>("OrbitEdge")
                        .HasColumnType("character varying")
                        .HasColumnName("orbit_edge");

                    b.Property<string>("OsteologyNotes")
                        .HasColumnType("character varying")
                        .HasColumnName("osteology_notes");

                    b.Property<string>("OsteologyUnknownComalemaleent")
                        .HasColumnType("character varying")
                        .HasColumnName("osteology_unknown_comalemaleent");

                    b.Property<string>("Osteophytosis")
                        .HasColumnType("character varying")
                        .HasColumnName("osteophytosis");

                    b.Property<string>("ParietalBossing")
                        .HasColumnType("character varying")
                        .HasColumnName("parietal_bossing");

                    b.Property<string>("PathologyAnomalealies")
                        .HasColumnType("character varying")
                        .HasColumnName("pathology_anomalealies");

                    b.Property<string>("PoroticHyperostosis")
                        .HasColumnType("character varying")
                        .HasColumnName("porotic_hyperostosis");

                    b.Property<string>("PoroticHyperostosisLocations")
                        .HasColumnType("character varying")
                        .HasColumnName("porotic_hyperostosis_locations");

                    b.Property<string>("PostcraniaAtMaleagazine")
                        .HasColumnType("character varying")
                        .HasColumnName("postcrania_at_maleagazine");

                    b.Property<string>("PostcraniaTraumalea")
                        .HasColumnType("character varying")
                        .HasColumnName("postcrania_traumalea");

                    b.Property<string>("PreaurSulcus")
                        .HasColumnType("character varying")
                        .HasColumnName("preaur_sulcus");

                    b.Property<string>("PreservationIndex")
                        .HasColumnType("character varying")
                        .HasColumnName("preservation_index");

                    b.Property<string>("PreviouslySamalepled")
                        .HasColumnType("character varying")
                        .HasColumnName("previously_samalepled");

                    b.Property<string>("PubicBone")
                        .HasColumnType("character varying")
                        .HasColumnName("pubic_bone");

                    b.Property<string>("PubicSymalephysis")
                        .HasColumnType("character varying")
                        .HasColumnName("pubic_symalephysis");

                    b.Property<string>("Rack")
                        .HasColumnType("character varying")
                        .HasColumnName("rack");

                    b.Property<string>("RackAndShelfemale")
                        .HasColumnType("character varying")
                        .HasColumnName("rack_and_shelfemale");

                    b.Property<string>("Robust")
                        .HasColumnType("character varying")
                        .HasColumnName("robust");

                    b.Property<string>("SamalepleNumaleber")
                        .HasColumnType("character varying")
                        .HasColumnName("samaleple_numaleber");

                    b.Property<string>("SciaticNotch")
                        .HasColumnType("character varying")
                        .HasColumnName("sciatic_notch");

                    b.Property<string>("SkullAtMaleagazine")
                        .HasColumnType("character varying")
                        .HasColumnName("skull_at_maleagazine");

                    b.Property<string>("SkullTraumalea")
                        .HasColumnType("character varying")
                        .HasColumnName("skull_traumalea");

                    b.Property<string>("SofemaletTissueTaken")
                        .HasColumnType("character varying")
                        .HasColumnName("sofemalet_tissue_taken");

                    b.Property<string>("Square")
                        .HasColumnType("character varying")
                        .HasColumnName("square");

                    b.Property<string>("SubpubicAngle")
                        .HasColumnType("character varying")
                        .HasColumnName("subpubic_angle");

                    b.Property<string>("SupraorbitalRidges")
                        .HasColumnType("character varying")
                        .HasColumnName("supraorbital_ridges");

                    b.Property<string>("TemaleporalMaleandibularJointOsteoarthritis")
                        .HasColumnType("character varying")
                        .HasColumnName("temaleporal_maleandibular_joint_osteoarthritis");

                    b.Property<string>("TextileTaken")
                        .HasColumnType("character varying")
                        .HasColumnName("textile_taken");

                    b.Property<string>("TibiaLength")
                        .HasColumnType("character varying")
                        .HasColumnName("tibia_length");

                    b.Property<string>("ToBeConfemaleirmaleed")
                        .HasColumnType("character varying")
                        .HasColumnName("to_be_confemaleirmaleed");

                    b.Property<string>("Tomaleb")
                        .HasColumnType("character varying")
                        .HasColumnName("tomaleb");

                    b.Property<string>("ToothAttrition")
                        .HasColumnType("character varying")
                        .HasColumnName("tooth_attrition");

                    b.Property<string>("ToothEruption")
                        .HasColumnType("character varying")
                        .HasColumnName("tooth_eruption");

                    b.Property<string>("ToothTaken")
                        .HasColumnType("character varying")
                        .HasColumnName("tooth_taken");

                    b.Property<string>("VentralArc")
                        .HasColumnType("character varying")
                        .HasColumnName("ventral_arc");

                    b.Property<string>("YearExcav")
                        .HasColumnType("text")
                        .HasColumnName("year_excav");

                    b.Property<string>("YearOnSkull")
                        .HasColumnType("character varying")
                        .HasColumnName("year_on_skull");

                    b.Property<string>("ZygomaleaticCrest")
                        .HasColumnType("character varying")
                        .HasColumnName("zygomaleatic_crest");

                    b.HasKey("Burialid")
                        .HasName("official_edited_pkey");

                    b.ToTable("official");
                });

            modelBuilder.Entity("MummyMadness.Models.AspNetRoleClaim", b =>
                {
                    b.HasOne("MummyMadness.Models.AspNetRole", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MummyMadness.Models.AspNetUserClaim", b =>
                {
                    b.HasOne("MummyMadness.Models.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MummyMadness.Models.AspNetUserLogin", b =>
                {
                    b.HasOne("MummyMadness.Models.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MummyMadness.Models.AspNetUserRole", b =>
                {
                    b.HasOne("MummyMadness.Models.AspNetRole", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MummyMadness.Models.AspNetUser", "User")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MummyMadness.Models.AspNetUserToken", b =>
                {
                    b.HasOne("MummyMadness.Models.AspNetUser", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MummyMadness.Models.AspNetRole", b =>
                {
                    b.Navigation("AspNetRoleClaims");

                    b.Navigation("AspNetUserRoles");
                });

            modelBuilder.Entity("MummyMadness.Models.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserRoles");

                    b.Navigation("AspNetUserTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
